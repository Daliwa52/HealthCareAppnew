swagger: "2.0"
info:
  title: "Messaging API"
  description: "API for sending and retrieving messages and conversations, utilizing an SQLite backend."
  version: "1.0.1" # Updated version
host: "localhost:5000" # Example host, should be configured for deployment
basePath: "/api"
schemes:
  - "http" # For development
  # - "https" # For production

consumes:
  - "application/json"
produces:
  - "application/json"

definitions:
  MessagePayload:
    type: "object"
    description: "Payload for sending a new message."
    required:
      - sender_id
      - receiver_id
      - content
    properties:
      sender_id:
        type: "integer"
        format: "int32"
        description: "ID of the user sending the message."
        example: 1
      receiver_id:
        type: "integer"
        format: "int32"
        description: "ID of the user receiving the message."
        example: 2
      content:
        type: "string"
        description: "The text content of the message."
        example: "Hello, how are you today?"
    xml: # Added for potential XML consumers, though API is JSON focused
      name: "MessagePayload"


  MessageSentResponse:
    type: "object"
    description: "Response after successfully sending a message."
    properties:
      status:
        type: "string"
        example: "success"
      message_id:
        type: "integer"
        format: "int32"
        description: "ID of the newly created message."
        example: 456
      conversation_id:
        type: "integer"
        format: "int32"
        description: "ID of the conversation the message belongs to."
        example: 123
      sender_id:
        type: "integer"
        format: "int32"
        description: "ID of the message sender (echoed back)."
        example: 1
      content:
        type: "string"
        description: "The content of the message sent (echoed back)."
        example: "Hello, how are you today?"

  Conversation:
    type: "object"
    description: "Represents a conversation summary, including details of the other participant and the last message."
    properties:
      conversation_id:
        type: "integer"
        format: "int32"
        description: "Unique identifier for the conversation."
      participant1_id:
        type: "integer"
        format: "int32"
        description: "ID of the first participant in the conversation."
      participant2_id:
        type: "integer"
        format: "int32"
        description: "ID of the second participant in the conversation."
      other_participant_id:
        type: "integer"
        format: "int32"
        description: "ID of the other participant relative to the requesting user."
      other_participant_username:
        type: "string"
        description: "Username of the other participant in the conversation."
      last_message_content:
        type: "string"
        nullable: true # Can be null if no messages yet
        description: "Content of the most recent message in the conversation."
      last_message_timestamp:
        type: "string"
        format: "date-time" # SQLite stores as TEXT, but it represents datetime
        nullable: true # Can be null if no messages yet
        description: "Timestamp of the last message."
      conversation_updated_at:
        type: "string"
        format: "date-time" # SQLite stores as TEXT, but it represents datetime
        description: "Timestamp when the conversation was last updated (e.g., by a new message)."
    example:
      conversation_id: 123
      participant1_id: 1
      participant2_id: 2
      other_participant_id: 2
      other_participant_username: "devuser2"
      last_message_content": "Hi User1! This is User2."
      last_message_timestamp": "2024-03-10T14:30:01Z" # Example format
      conversation_updated_at: "2024-03-10T14:30:01Z" # Example format

  Message:
    type: "object"
    description: "Represents a single message within a conversation."
    properties:
      message_id:
        type: "integer"
        format: "int32"
        description: "Unique identifier for the message."
      conversation_id:
        type: "integer"
        format: "int32"
        description: "ID of the conversation this message belongs to."
      sender_id:
        type: "integer"
        format: "int32"
        description: "ID of the user who sent this message."
      content:
        type: "string"
        description: "The text content of the message."
      timestamp:
        type: "string"
        format: "date-time" # SQLite stores as TEXT, but it represents datetime
        description: "Timestamp when the message was sent."
      is_read:
        type: "boolean" # API should return boolean, even if DB stores as 0/1
        description: "Indicates if the message has been read (currently defaults to false)."
    example:
      message_id: 456
      conversation_id: 123
      sender_id: 1
      content: "Hello, how are you today?"
      timestamp: "2024-03-10T14:30:00Z" # Example format
      is_read: false

  Error:
    type: "object"
    description: "Standard error response structure."
    required:
      - status
      - message
    properties:
      status:
        type: "string"
        example: "error"
        enum: # Added to show it's always 'error' for this schema
          - "error"
      message:
        type: "string"
        description: "A human-readable description of the error."
        example: "Missing required fields: content"

paths:
  /messages:
    post:
      summary: "Send a new message"
      description: |
        Creates a new message from a sender to a receiver.
        If a conversation between the two users doesn't exist, it will be created.
        The conversation's `updated_at` timestamp is refreshed upon new message creation.
      tags:
        - "Messages"
      parameters:
        - name: "body"
          in: "body"
          required: true
          description: "Payload containing sender ID, receiver ID, and message content."
          schema:
            $ref: "#/definitions/MessagePayload"
      responses:
        "201":
          description: "Message sent successfully."
          schema:
            $ref: "#/definitions/MessageSentResponse"
        "400":
          description: |
            Bad Request. Possible reasons:
            - Invalid JSON payload.
            - Missing required fields (`sender_id`, `receiver_id`, `content`).
            - Invalid data types (e.g., `sender_id` or `receiver_id` not integers).
            - Content is an empty string.
            - Sender and receiver are the same user (`ValueError` from backend).
            - Foreign key constraint violation (e.g., `sender_id` or `receiver_id` do not exist in users table - `sqlite3.IntegrityError`).
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error. Typically due to a database issue or other unexpected server problem."
          schema:
            $ref: "#/definitions/Error"

  /conversations:
    get:
      summary: "Get user's conversations"
      description: |
        Retrieves a list of all conversations for a specified user.
        Each conversation summary includes details of the other participant and the last message exchanged.
        Conversations are ordered by the most recently updated.
      tags:
        - "Conversations"
      parameters:
        - name: "user_id"
          in: "query"
          type: "integer"
          format: "int32"
          required: true
          description: "ID of the user whose conversations are to be fetched."
      responses:
        "200":
          description: "A list of the user's conversations."
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "success"
              user_id: # Added to echo back the user_id for clarity
                type: "integer"
                format: "int32"
              conversations:
                type: "array"
                items:
                  $ref: "#/definitions/Conversation"
        "400":
          description: |
            Bad Request. Possible reasons:
            - `user_id` query parameter is missing.
            - `user_id` is not an integer.
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error. Typically due to a database issue."
          schema:
            $ref: "#/definitions/Error"

  /conversations/{conversation_id}/messages:
    get:
      summary: "Get messages for a conversation"
      description: |
        Retrieves all messages within a specific conversation.
        The requesting user (identified by `user_id` query parameter) must be a participant in the conversation.
        Messages are ordered by timestamp (oldest first).
      tags:
        - "Conversations"
      parameters:
        - name: "conversation_id"
          in: "path"
          type: "integer"
          format: "int32"
          required: true
          description: "ID of the conversation whose messages are to be fetched."
        - name: "user_id"
          in: "query"
          type: "integer"
          format: "int32"
          required: true
          description: "ID of the user requesting the messages; used for authorization to ensure the user is a participant in the conversation."
      responses:
        "200":
          description: "A list of messages in the specified conversation."
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "success"
              conversation_id: # Added to echo back conversation_id for clarity
                type: "integer"
                format: "int32"
              messages:
                type: "array"
                items:
                  $ref: "#/definitions/Message"
        "400":
          description: |
            Bad Request. Possible reasons:
            - `user_id` query parameter for authorization is missing.
            - `user_id` is not an integer.
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Forbidden. The requesting `user_id` is not a participant in this conversation."
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found. The specified `conversation_id` does not exist."
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error. Typically due to a database issue."
          schema:
            $ref: "#/definitions/Error"
